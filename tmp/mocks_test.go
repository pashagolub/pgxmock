// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tmp

import (
	"context"

	"github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDAO creates a new instance of MockDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDAO {
	mock := &MockDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDAO is an autogenerated mock type for the DAO type
type MockDAO struct {
	mock.Mock
}

type MockDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDAO) EXPECT() *MockDAO_Expecter {
	return &MockDAO_Expecter{mock: &_m.Mock}
}

// QueryRow provides a mock function for the type MockDAO
func (_mock *MockDAO) QueryRow(context1 context.Context, s string, vs ...any) pgx.Row {
	var tmpRet mock.Arguments
	if len(vs) > 0 {
		tmpRet = _mock.Called(context1, s, vs)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Row); ok {
		r0 = returnFunc(context1, s, vs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}
	return r0
}

// MockDAO_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDAO_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - vs ...any
func (_e *MockDAO_Expecter) QueryRow(context1 interface{}, s interface{}, vs ...interface{}) *MockDAO_QueryRow_Call {
	return &MockDAO_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{context1, s}, vs...)...)}
}

func (_c *MockDAO_QueryRow_Call) Run(run func(context1 context.Context, s string, vs ...any)) *MockDAO_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDAO_QueryRow_Call) Return(row pgx.Row) *MockDAO_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockDAO_QueryRow_Call) RunAndReturn(run func(context1 context.Context, s string, vs ...any) pgx.Row) *MockDAO_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}
